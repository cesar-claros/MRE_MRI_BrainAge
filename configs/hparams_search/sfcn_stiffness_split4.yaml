# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/loss_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: Stiffness

    # number of parallel workers
    n_jobs: 5

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 100

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 12345
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    # params:
    #   data.map_type: "Stiffness"
    #   model.net.num_input_maps: 1
    #   data.batch_size: choice(4, 8, 12, 16, 20, 24, 28)
    #   model.optimizer.lr: interval(0.00001, 0.01)
    #   model.net.cat_input_type: choice('"none"','"sex"','"study"','"sex_study"')
    #   model.net.arc_type: choice('"1"','"2"','"3"','"4"')
    params:
      callbacks.model_checkpoint.monitor: "val/loss"
      callbacks.model_checkpoint.mode: "min"
      callbacks.early_stopping.monitor: "val/loss"
      trainer.max_epochs: 100
      data.num_workers: 5
      data.map_type: "Stiffness"
      # data.transform: "clip"
      data.batch_size: choice(4, 8, 12, 16, 20, 24)
      model.optimizer._target_: torch.optim.SGD
      model.optimizer.momentum: choice(0.99, 0.9, 0.5)
      model.optimizer.weight_decay: choice(10.0, 1.0, 0.1, 0.01, 0.001)
      model.optimizer.lr: interval(0.0001, 0.001)
      model.scheduler._target_: torch.optim.lr_scheduler.ReduceLROnPlateau
      model.scheduler.mode: min
      model.scheduler.factor: 0.1
      model.scheduler.patience: 10
      model.net._target_: src.models.components.sfcn.SFCN
      model.net.num_input_maps: 1
      model.net.c_hidden : [32, 64, 128, 64]
      # model.net.block_name: "PreActResNetBlock"
      # model.net.num_blocks: [3,4,6,3]
      # model.net.c_hidden : [64,128,256,512]
      paths.data_dir: ${paths.root_dir}/../data/
      paths.splits_dir: ${paths.root_dir}/../data/splits/split4/
    # net:
    # _target_: src.models.components.resnet3d.ResNet3D
    # block_name:  "PreActResNetBlock"
    
    # c_hidden : [64,128,256,512]
    # num_input_maps: 2
      # model.net.cat_input_type: "sex"
      # model.net.arc_type: "4"

# trainer:
  # min_epochs: 10
  # max_epochs: 30
  # gradient_clip_val: 0.5

# callbacks:
  # model_checkpoint:
    # monitor: "val/loss"
    # mode: "min"

  # early_stopping:
    # monitor: "val/loss"

# model:
  # optimizer:
    # _target_: torch.optim.AdamW
    # lr: 0.0001
    # weight_decay: 0.0001
  # scheduler:
  #   _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
  #   mode: min
  #   factor: 0.1
  #   patience: 10
  # net:
    # net:
    # _target_: src.models.components.resnet3d.ResNet3D
    # cat_input_type: "none"
    # lin3_size: 64

# data:
#   batch_size: 8
#   num_workers: 5